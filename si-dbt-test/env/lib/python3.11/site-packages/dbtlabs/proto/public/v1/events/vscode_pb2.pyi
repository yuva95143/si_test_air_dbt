"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import dbtlabs.proto.public.v1.events.vortex_pb2
import dbtlabs.proto.public.v1.fields.vscode_types_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class ExtensionActivated(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENRICHMENT_FIELD_NUMBER: builtins.int
    EDITOR_FIELD_NUMBER: builtins.int
    USER_FIELD_NUMBER: builtins.int
    OS_NAME_FIELD_NUMBER: builtins.int
    OS_VERSION_FIELD_NUMBER: builtins.int
    INIT_SUCCESS_FIELD_NUMBER: builtins.int
    INIT_ERROR_FIELD_NUMBER: builtins.int
    INIT_ERROR_DETAIL_FIELD_NUMBER: builtins.int
    INIT_DURATION_MS_FIELD_NUMBER: builtins.int
    IS_LSP_INSTALLED_FIELD_NUMBER: builtins.int
    IS_FUSION_INSTALLED_FIELD_NUMBER: builtins.int
    DBT_VERSION_FIELD_NUMBER: builtins.int
    os_name: builtins.str
    """os name"""
    os_version: builtins.str
    """os version"""
    init_success: builtins.bool
    """whether the extension was able to initialize successfully"""
    init_error: builtins.str
    """type of initializion error, if an error occurred at initialization"""
    init_error_detail: builtins.str
    """detailed error message, if an error occurred at initialization"""
    init_duration_ms: builtins.int
    """duration of the initialization in milliseconds"""
    is_lsp_installed: builtins.bool
    """does the user have LSP installed"""
    is_fusion_installed: builtins.bool
    """does the user have fusion installed"""
    dbt_version: builtins.str
    """the version of dbt used in the project"""
    @property
    def enrichment(self) -> dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment: ...
    @property
    def editor(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor: ...
    @property
    def user(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.User: ...
    def __init__(
        self,
        *,
        enrichment: dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment | None = ...,
        editor: dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor | None = ...,
        user: dbtlabs.proto.public.v1.fields.vscode_types_pb2.User | None = ...,
        os_name: builtins.str = ...,
        os_version: builtins.str = ...,
        init_success: builtins.bool = ...,
        init_error: builtins.str = ...,
        init_error_detail: builtins.str = ...,
        init_duration_ms: builtins.int = ...,
        is_lsp_installed: builtins.bool = ...,
        is_fusion_installed: builtins.bool = ...,
        dbt_version: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["dbt_version", b"dbt_version", "editor", b"editor", "enrichment", b"enrichment", "init_duration_ms", b"init_duration_ms", "init_error", b"init_error", "init_error_detail", b"init_error_detail", "init_success", b"init_success", "is_fusion_installed", b"is_fusion_installed", "is_lsp_installed", b"is_lsp_installed", "os_name", b"os_name", "os_version", b"os_version", "user", b"user"]) -> None: ...

global___ExtensionActivated = ExtensionActivated

@typing.final
class ExtensionLspCompile(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENRICHMENT_FIELD_NUMBER: builtins.int
    EDITOR_FIELD_NUMBER: builtins.int
    USER_FIELD_NUMBER: builtins.int
    PROJECT_ID_FIELD_NUMBER: builtins.int
    ADAPTER_TYPE_FIELD_NUMBER: builtins.int
    ADAPTER_UNIQUE_ID_FIELD_NUMBER: builtins.int
    DBT_VERSION_FIELD_NUMBER: builtins.int
    COMPILE_SUCCESS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    DURATION_MS_FIELD_NUMBER: builtins.int
    project_id: builtins.str
    """this is the hash of the project's name, used for anonymized telemetry"""
    adapter_type: builtins.str
    """the type of adapter used in the project (snowflake, bigquery, etc)"""
    adapter_unique_id: builtins.str
    """the unique id of the adapter used in the active profile eg. md5(hostname)"""
    dbt_version: builtins.str
    """the version of dbt used in the project"""
    compile_success: builtins.bool
    """Indicates whether the compile was successful"""
    duration_ms: builtins.int
    """duration of the compile in milliseconds"""
    @property
    def enrichment(self) -> dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment: ...
    @property
    def editor(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor: ...
    @property
    def user(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.User: ...
    @property
    def errors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[dbtlabs.proto.public.v1.fields.vscode_types_pb2.CompileError]: ...
    def __init__(
        self,
        *,
        enrichment: dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment | None = ...,
        editor: dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor | None = ...,
        user: dbtlabs.proto.public.v1.fields.vscode_types_pb2.User | None = ...,
        project_id: builtins.str = ...,
        adapter_type: builtins.str = ...,
        adapter_unique_id: builtins.str = ...,
        dbt_version: builtins.str = ...,
        compile_success: builtins.bool = ...,
        errors: collections.abc.Iterable[dbtlabs.proto.public.v1.fields.vscode_types_pb2.CompileError] | None = ...,
        duration_ms: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["adapter_type", b"adapter_type", "adapter_unique_id", b"adapter_unique_id", "compile_success", b"compile_success", "dbt_version", b"dbt_version", "duration_ms", b"duration_ms", "editor", b"editor", "enrichment", b"enrichment", "errors", b"errors", "project_id", b"project_id", "user", b"user"]) -> None: ...

global___ExtensionLspCompile = ExtensionLspCompile

@typing.final
class ExtensionUserStateChange(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENRICHMENT_FIELD_NUMBER: builtins.int
    EDITOR_FIELD_NUMBER: builtins.int
    USER_FIELD_NUMBER: builtins.int
    CHANGED_TO_STATE_FIELD_NUMBER: builtins.int
    changed_to_state: dbtlabs.proto.public.v1.fields.vscode_types_pb2.UserState.ValueType
    """the state the user changed to"""
    @property
    def enrichment(self) -> dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment: ...
    @property
    def editor(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor: ...
    @property
    def user(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.User: ...
    def __init__(
        self,
        *,
        enrichment: dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment | None = ...,
        editor: dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor | None = ...,
        user: dbtlabs.proto.public.v1.fields.vscode_types_pb2.User | None = ...,
        changed_to_state: dbtlabs.proto.public.v1.fields.vscode_types_pb2.UserState.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["changed_to_state", b"changed_to_state", "editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> None: ...

global___ExtensionUserStateChange = ExtensionUserStateChange

@typing.final
class ExtensionCtePreview(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENRICHMENT_FIELD_NUMBER: builtins.int
    EDITOR_FIELD_NUMBER: builtins.int
    USER_FIELD_NUMBER: builtins.int
    @property
    def enrichment(self) -> dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment: ...
    @property
    def editor(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor: ...
    @property
    def user(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.User: ...
    def __init__(
        self,
        *,
        enrichment: dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment | None = ...,
        editor: dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor | None = ...,
        user: dbtlabs.proto.public.v1.fields.vscode_types_pb2.User | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> None: ...

global___ExtensionCtePreview = ExtensionCtePreview

@typing.final
class ExtensionLineageTabClicked(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENRICHMENT_FIELD_NUMBER: builtins.int
    EDITOR_FIELD_NUMBER: builtins.int
    USER_FIELD_NUMBER: builtins.int
    @property
    def enrichment(self) -> dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment: ...
    @property
    def editor(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor: ...
    @property
    def user(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.User: ...
    def __init__(
        self,
        *,
        enrichment: dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment | None = ...,
        editor: dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor | None = ...,
        user: dbtlabs.proto.public.v1.fields.vscode_types_pb2.User | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> None: ...

global___ExtensionLineageTabClicked = ExtensionLineageTabClicked

@typing.final
class ExtensionColumnLineage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENRICHMENT_FIELD_NUMBER: builtins.int
    EDITOR_FIELD_NUMBER: builtins.int
    USER_FIELD_NUMBER: builtins.int
    @property
    def enrichment(self) -> dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment: ...
    @property
    def editor(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor: ...
    @property
    def user(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.User: ...
    def __init__(
        self,
        *,
        enrichment: dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment | None = ...,
        editor: dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor | None = ...,
        user: dbtlabs.proto.public.v1.fields.vscode_types_pb2.User | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> None: ...

global___ExtensionColumnLineage = ExtensionColumnLineage

@typing.final
class ExtensionShowCompiledFile(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENRICHMENT_FIELD_NUMBER: builtins.int
    EDITOR_FIELD_NUMBER: builtins.int
    USER_FIELD_NUMBER: builtins.int
    @property
    def enrichment(self) -> dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment: ...
    @property
    def editor(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor: ...
    @property
    def user(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.User: ...
    def __init__(
        self,
        *,
        enrichment: dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment | None = ...,
        editor: dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor | None = ...,
        user: dbtlabs.proto.public.v1.fields.vscode_types_pb2.User | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> None: ...

global___ExtensionShowCompiledFile = ExtensionShowCompiledFile

@typing.final
class ExtensionModelRename(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENRICHMENT_FIELD_NUMBER: builtins.int
    EDITOR_FIELD_NUMBER: builtins.int
    USER_FIELD_NUMBER: builtins.int
    @property
    def enrichment(self) -> dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment: ...
    @property
    def editor(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor: ...
    @property
    def user(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.User: ...
    def __init__(
        self,
        *,
        enrichment: dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment | None = ...,
        editor: dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor | None = ...,
        user: dbtlabs.proto.public.v1.fields.vscode_types_pb2.User | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> None: ...

global___ExtensionModelRename = ExtensionModelRename

@typing.final
class ExtensionColumnRename(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENRICHMENT_FIELD_NUMBER: builtins.int
    EDITOR_FIELD_NUMBER: builtins.int
    USER_FIELD_NUMBER: builtins.int
    @property
    def enrichment(self) -> dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment: ...
    @property
    def editor(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor: ...
    @property
    def user(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.User: ...
    def __init__(
        self,
        *,
        enrichment: dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment | None = ...,
        editor: dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor | None = ...,
        user: dbtlabs.proto.public.v1.fields.vscode_types_pb2.User | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> None: ...

global___ExtensionColumnRename = ExtensionColumnRename

@typing.final
class ExtensionUsedBuildMenu(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENRICHMENT_FIELD_NUMBER: builtins.int
    EDITOR_FIELD_NUMBER: builtins.int
    USER_FIELD_NUMBER: builtins.int
    SELECTED_COMMAND_FIELD_NUMBER: builtins.int
    selected_command: builtins.str
    """the command that the user selected"""
    @property
    def enrichment(self) -> dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment: ...
    @property
    def editor(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor: ...
    @property
    def user(self) -> dbtlabs.proto.public.v1.fields.vscode_types_pb2.User: ...
    def __init__(
        self,
        *,
        enrichment: dbtlabs.proto.public.v1.events.vortex_pb2.VortexMessageEnrichment | None = ...,
        editor: dbtlabs.proto.public.v1.fields.vscode_types_pb2.Editor | None = ...,
        user: dbtlabs.proto.public.v1.fields.vscode_types_pb2.User | None = ...,
        selected_command: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "user", b"user"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["editor", b"editor", "enrichment", b"enrichment", "selected_command", b"selected_command", "user", b"user"]) -> None: ...

global___ExtensionUsedBuildMenu = ExtensionUsedBuildMenu
